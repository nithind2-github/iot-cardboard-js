{"version":3,"file":"MsalAuthService-33afe8cb.js","sources":["../../src/Models/Services/MsalAuthService.ts"],"sourcesContent":["import * as Msal from '@azure/msal-browser';\nimport {\n    IEnvironmentToConstantMapping,\n    IAuthService\n} from '../Constants/Interfaces';\n\nexport default class MsalAuthService implements IAuthService {\n    private getTokenCalls = [];\n    private gettingToken = false;\n    private isLoggingIn = true;\n    private executeGetTokenSequentially = true;\n    private authContextConfig;\n    private authContext;\n\n    private environmentToConstantMapping: IEnvironmentToConstantMapping = {\n        authority: 'https://login.microsoftonline.com/organizations',\n\n        // valid redirect URI for this is client ID is https://adtexplorer-tsi-local.azurewebsites.net\n        // modify hosts file accordingly\n        clientId: 'e7e88070-28a1-43a3-9704-d8b986eb5f60',\n\n        scope: 'https://api.timeseries.azure.com/.default',\n\n        redirectUri: window.location.protocol + '//' + window.location.hostname\n\n        // // The resource URI for ADT should NOT end with a trailing slash as it will cause\n        // // authentication to fail.\n        // scope: 'https://digitaltwins.azure.net/.default'\n    };\n\n    constructor(environmentToConstantMapping?: IEnvironmentToConstantMapping) {\n        this.environmentToConstantMapping =\n            environmentToConstantMapping || this.environmentToConstantMapping;\n\n        this.authContextConfig = {\n            auth: {\n                clientId: this.environmentToConstantMapping.clientId,\n                authority: `${this.environmentToConstantMapping.authority}`,\n                redirectUri: this.environmentToConstantMapping.redirectUri,\n                navigateToLoginRequestUrl: true\n            },\n            cache: {\n                cacheLocation: 'localStorage',\n                storeAuthStateInCookie: true\n            }\n        };\n        this.authContext = new Msal.PublicClientApplication(\n            this.authContextConfig\n        );\n    }\n\n    public login = () => {\n        this.isLoggingIn = true;\n\n        const accounts = this.authContext.getAllAccounts();\n        if (accounts.length) {\n            this.authContext.setActiveAccount(accounts[0]);\n            this.isLoggingIn = false;\n            this.shiftAndExecuteGetTokenCall();\n        } else {\n            this.authContext\n                .loginPopup()\n                .then(() => {\n                    // In case multiple accounts exist, you can select\n                    const currentAccounts = this.authContext.getAllAccounts();\n                    this.authContext.setActiveAccount(currentAccounts[0]);\n                    this.isLoggingIn = false;\n                    this.shiftAndExecuteGetTokenCall();\n                })\n                .catch(function (error) {\n                    //login failure\n                    alert(error);\n                });\n        }\n    };\n\n    private logout = () => {\n        this.authContext.logout();\n    };\n\n    private shiftAndExecuteGetTokenCall = () => {\n        const call = this.getTokenCalls.shift();\n        if (call) {\n            call.call();\n        }\n    };\n\n    private createGetTokenCall = (\n        scope,\n        resolve,\n        reject,\n        allowParallelGetTokenAfterComplete\n    ) => {\n        const resolveToken = ({ accessToken }) => {\n            if (allowParallelGetTokenAfterComplete) {\n                this.executeGetTokenSequentially = false;\n            }\n            this.gettingToken = false;\n            resolve(accessToken);\n            this.shiftAndExecuteGetTokenCall();\n        };\n\n        return () => {\n            this.gettingToken = true;\n            this.authContext\n                .acquireTokenSilent(scope)\n                .then(resolveToken)\n                .catch((error) => {\n                    if (error instanceof Msal.InteractionRequiredAuthError) {\n                        // popups are likely to be blocked by the browser\n                        // notify the user that they should enable them\n                        alert(\n                            'Some authentication flows will require pop-ups, please make sure popups are enabled for this site.'\n                        );\n                        this.authContext\n                            .acquireTokenPopup(scope)\n                            .then(resolveToken)\n                            .catch((error) => {\n                                console.error(error);\n                                resolveToken(error);\n                            });\n                    } else {\n                        console.error(error);\n                        resolveToken(error);\n                    }\n                });\n        };\n    };\n\n    private getGenericTokenPromiseCallback = (\n        scope,\n        allowParallelGetTokenAfterComplete = false\n    ) => {\n        scope.authority = `${this.environmentToConstantMapping.authority}`;\n        return (resolve, reject) => {\n            const getTokenCall = this.createGetTokenCall(\n                scope,\n                resolve,\n                reject,\n                allowParallelGetTokenAfterComplete\n            );\n            this.getTokenCalls.push(getTokenCall);\n            if (\n                (!this.gettingToken || !this.executeGetTokenSequentially) &&\n                !this.isLoggingIn\n            ) {\n                this.shiftAndExecuteGetTokenCall();\n            }\n        };\n    };\n\n    public getToken = (\n        tokenFor?: 'azureManagement' | 'adx' | 'storage' | 'powerBI'\n    ) => {\n        let scope;\n        switch (tokenFor) {\n            case 'azureManagement':\n                scope = 'https://management.azure.com//.default';\n                return new Promise(\n                    this.getGenericTokenPromiseCallback(\n                        {\n                            scopes: [scope]\n                        },\n                        true\n                    )\n                ) as Promise<string>;\n            case 'adx':\n                scope = 'https://help.kusto.windows.net/user_impersonation';\n                return new Promise(\n                    this.getGenericTokenPromiseCallback(\n                        {\n                            scopes: [scope]\n                        },\n                        true\n                    )\n                ) as Promise<string>;\n            case 'storage':\n                scope = 'https://storage.azure.com/user_impersonation';\n                return new Promise(\n                    this.getGenericTokenPromiseCallback(\n                        {\n                            scopes: [scope]\n                        },\n                        true\n                    )\n                ) as Promise<string>;\n            case 'powerBI':\n                scope = 'https://analysis.windows.net/powerbi/api/.default';\n                return new Promise(\n                    this.getGenericTokenPromiseCallback(\n                        {\n                            scopes: [scope]\n                        },\n                        true\n                    )\n                ) as Promise<string>;\n            default:\n                scope = this.environmentToConstantMapping.scope;\n                return new Promise(\n                    this.getGenericTokenPromiseCallback({\n                        scopes: [scope]\n                    })\n                ) as Promise<string>;\n        }\n    };\n}\n"],"names":["Msal.InteractionRequiredAuthError","Msal.PublicClientApplication"],"mappings":"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"}