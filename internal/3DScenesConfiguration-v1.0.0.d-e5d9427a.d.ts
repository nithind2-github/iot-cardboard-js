/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

type IElement = ITwinToObjectMapping | ICustomProperty;
type IDataSource = IElementTwinToObjectMappingDataSource | ICustomProperty;
type IVisual = IPopoverVisual | IExpressionRangeVisual;
type IWidget = IGaugeWidget | ILinkWidget | IValueWidget | IDataHistoryWidget | IPowerBIWidget;
/**
 * Widget group to which a widget belongs
 */
type IGroupID = string;
/**
 * Expression which evaluates to a numeric value
 */
type IValueExpression = string;
type ValueRangeValueType = number | string | boolean;
type IDTDLPropertyType =
    | 'boolean'
    | 'date'
    | 'dateTime'
    | 'double'
    | 'duration'
    | 'enum'
    | 'float'
    | 'integer'
    | 'long'
    | 'string'
    | 'time';
/**
 * A list of timeseries to render in the chart
 */
type IDataHistoryTimeSeries = IDataHistoryBasicTimeSeries[];
type IDataHistoryChartYAxisType = 'shared' | 'independent';
type IDataHistoryAggregationType = 'min' | 'max' | 'avg';
type IExpressionRangeType = 'NumericRange' | 'CategoricalValues';

/**
 * A vocabulary to annotate and validate the JSON representation of 3D scene configuration data
 */
interface I3DScenesConfig {
    $schema: string;
    /**
     * 3D scene configuration data
     */
    configuration: {
        scenes: IScene[];
        behaviors: IBehavior[];
        layers: ILayer[];
    };
}
/**
 * A scene is a single view that can be rendered from 3D assets
 */
interface IScene {
    assets: IAsset[];
    behaviorIDs: string[];
    elements: IElement[];
    id: string;
    description?: string;
    displayName: string;
    latitude?: number;
    longitude?: number;
    pollingConfiguration?: IPollingConfiguration;
}
/**
 * A 3D asset used to create the scene
 */
interface IAsset {
    type: string;
    url: string;
    extensionProperties?: IExtensionProperties;
}
/**
 * Optional bag of non-schematized extension properties
 */
interface IExtensionProperties {
    [k: string]: unknown;
}
/**
 * An elements maps twins to objects in the scene
 */
interface ITwinToObjectMapping {
    type: 'TwinToObjectMapping';
    id: string;
    displayName: string;
    /**
     * The twin referenced by this element
     */
    primaryTwinID: string;
    /**
     * Array of of object IDs in the scene
     */
    objectIDs: string[];
    /**
     * Links to relevant twins other than the primary primaryTwin.  These aliases can be referenced in behavior expressions.
     */
    twinAliases?: {
        [k: string]: string;
    };
    extensionProperties?: IExtensionProperties;
}
/**
 * Free form property
 */
interface ICustomProperty {
    type: 'CustomProperty';
    [k: string]: unknown;
}
/**
 * Configures the parameters for the polling of twin data from the twin graph.
 */
interface IPollingConfiguration {
    /**
     * The minimum time in milliseconds that data should be refreshed. NOTE: it may take longer than this to fetch the data so this is a floor value intended to limit the frequency when the consumer knows the data is not updated more often than a particular frequency.
     */
    minimumPollingFrequency: number;
}
/**
 * A behavior applies visual or interactive representations of twin state to objects in the scene
 */
interface IBehavior {
    id: string;
    displayName: string;
    twinAliases?: string[];
    /**
     * Data sources return an array of objects.  Each object is expected to have the same schema.  These objects can then be mapped over in visuals.
     */
    datasources: IDataSource[];
    /**
     * Visuals take a datasource, and modify objects in the scene based on expressions.  They allow you to color objects based on their state, float badges under alert conditions and configure popovers that trigger with user interaction
     */
    visuals: IVisual[];
}
/**
 * These datasources get their objects from the elements defined in a scene
 */
interface IElementTwinToObjectMappingDataSource {
    type: 'ElementTwinToObjectMappingDataSource';
    elementIDs: string[];
    extensionProperties?: IExtensionProperties;
}
/**
 * A popover displays information about a datasource when you click on any of the associated objectIDs
 */
interface IPopoverVisual {
    type: 'Popover';
    title: string;
    /**
     * Widgets are visuals within a popover.  Widgets can be grouped via widgetGroups property.
     */
    widgets: IWidget[];
    widgetGroups?: {
        id: string;
        title?: string;
        orientation?: string;
    }[];
    objectIDs: IObjectIDs;
}
/**
 * A gauge widget
 */
interface IGaugeWidget {
    type: 'Gauge';
    id: string;
    groupID?: IGroupID;
    valueExpression: IValueExpression;
    widgetConfiguration: IGaugeWidgetConfiguration;
    extensionProperties?: IExtensionProperties;
}
/**
 * Widget configuration specifies widget specific properties that are used for rendering this gauge
 */
interface IGaugeWidgetConfiguration {
    units?: string;
    label: string;
    valueRanges: IValueRange[];
}
/**
 * Range of values for which a visual indication is triggered
 */
interface IValueRange {
    id: string;
    /**
     * min/max values are parsed as a two element array [min, max].  Boolean values are parsed as a single element array [true]. String values are parsed as regular arrays [string1, string2, string3]
     */
    values: ValueRangeValueType[];
    visual: IValueRangeVisual;
    extensionProperties?: IExtensionProperties;
}
/**
 * Visual data to apply when values are in range
 */
interface IValueRangeVisual {
    color?: string;
    iconName?: string;
    labelExpression?: string;
    extensionProperties?: IExtensionProperties;
}
/**
 * A link widget which uses a string template to create a parametrized link
 */
interface ILinkWidget {
    type: 'Link';
    id: string;
    groupID?: IGroupID;
    widgetConfiguration: ILinkWidgetConfiguration;
    extensionProperties?: IExtensionProperties;
}
/**
 * Widget configuration specifies widget specific properties that are used for rendering this link
 */
interface ILinkWidgetConfiguration {
    label: string;
    /**
     * Template string which evalues to http link
     */
    linkExpression: string;
}
/**
 * A value widget which uses display name and value
 */
interface IValueWidget {
    type: 'Value';
    id: string;
    groupID?: IGroupID;
    widgetConfiguration: IValueWidgetConfiguration;
    extensionProperties?: IExtensionProperties;
}
/**
 * Widget configuration specifies widget specific properties that are used for rendering this value
 */
interface IValueWidgetConfiguration {
    displayName: string;
    valueExpression: IValueExpression;
    type: IDTDLPropertyType;
}
/**
 * A data history widget which uses twin properties to show timeseries data
 */
interface IDataHistoryWidget {
    type: 'Data history';
    id: string;
    groupID?: IGroupID;
    widgetConfiguration: IDataHistoryWidgetConfiguration;
    extensionProperties?: IExtensionProperties;
}
/**
 * Widget configuration specifies widget specific properties that are used for rendering this data history
 */
interface IDataHistoryWidgetConfiguration {
    /**
     * Database connection information of timeseries data
     */
    connection: IADXTimeSeriesConnection;
    displayName: string;
    timeSeries: IDataHistoryTimeSeries;
    chartOptions: IDataHistoryChartOptions;
}
/**
 * Azure Data Explorer connection information for time series data
 */
interface IADXTimeSeriesConnection {
    adxClusterUrl: string;
    adxDatabaseName: string;
    adxTableName: string;
}
/**
 * A basic timeseries to be rendered in the chart of the data history widget
 */
interface IDataHistoryBasicTimeSeries {
    id: string;
    expression: string;
    propertyType: IDTDLPropertyType;
    unit?: string;
    label?: string;
}
/**
 * Options to be used while rendering chart for data history widget
 */
interface IDataHistoryChartOptions {
    yAxisType: IDataHistoryChartYAxisType;
    defaultQuickTimeSpanInMillis: number;
    aggregationType: IDataHistoryAggregationType;
    extensionProperties?: IExtensionProperties;
}
/**
 * A widget to connect to Power BI and display a specified visualization
 */
interface IPowerBIWidget {
    type: 'PowerBI';
    id: string;
    widgetConfiguration: IPowerBIWidgetConfiguration;
    extensionProperties?: IExtensionProperties;
}
/**
 * Widget configuration for required Power BI properties used to render visualization
 */
interface IPowerBIWidgetConfiguration {
    /**
     * Supported types: report, dashboard, tile, visual
     */
    type: 'Tile' | 'Visual';
    displayName?: string;
    /**
     * The URL of the report that contains the visual that you're embedding. This URL becomes the source of the HTML iframe element that contains the embedded visual. Specifically, the API assigns the URL to the src attribute of the iframe. Similar to "https://app.powerbi.com/reportEmbed?reportId=<report ID>&groupId=<group ID>" or "https://app.powerbi.com/groups/<group ID>/reports/<report ID>"
     */
    embedUrl?: string;
    /**
     * The name of the page that contains the visual that you're embedding
     */
    pageName?: string;
    visualName?: string;
    /**
     * Template string which evalues to data filter
     */
    dataFilterExpression?: string;
}
/**
 * objectIDs specify the objects in the scene that a visual pertains to
 */
interface IObjectIDs {
    expression: string;
    extensionProperties?: IExtensionProperties;
}
/**
 * An expression range visual maps an expression result to a visual
 */
interface IExpressionRangeVisual {
    type: 'ExpressionRangeVisual';
    id?: string;
    displayName?: string;
    /**
     * Expression to evaluate
     */
    valueExpression: string;
    expressionType: IExpressionRangeType;
    valueRanges: IValueRange[];
    valueRangeType?: IDTDLPropertyType;
    objectIDs: IObjectIDs;
    extensionProperties?: IExtensionProperties;
}
/**
 * Layers are used to group behavior visibility
 */
interface ILayer {
    id: string;
    displayName: string;
    behaviorIDs: string[];
    extensionProperties?: IExtensionProperties;
}

export { IValueWidget as A, IValueWidgetConfiguration as B, IDataHistoryWidget as C, IDataHistoryWidgetConfiguration as D, IADXTimeSeriesConnection as E, IDataHistoryBasicTimeSeries as F, IDataHistoryChartOptions as G, IPowerBIWidget as H, IWidget as I, IPowerBIWidgetConfiguration as J, IObjectIDs as K, IExpressionRangeVisual as L, ILayer as M, ValueRangeValueType as V, I3DScenesConfig as a, ITwinToObjectMapping as b, IBehavior as c, IScene as d, IValueRange as e, IElement as f, IDataSource as g, IVisual as h, IGroupID as i, IValueExpression as j, IDTDLPropertyType as k, IDataHistoryTimeSeries as l, IDataHistoryChartYAxisType as m, IDataHistoryAggregationType as n, IExpressionRangeType as o, IAsset as p, IExtensionProperties as q, ICustomProperty as r, IPollingConfiguration as s, IElementTwinToObjectMappingDataSource as t, IPopoverVisual as u, IGaugeWidget as v, IGaugeWidgetConfiguration as w, IValueRangeVisual as x, ILinkWidget as y, ILinkWidgetConfiguration as z };
