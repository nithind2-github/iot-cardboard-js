{"version":3,"file":"useRuntimeSceneData-51255ff9.js","sources":["../../src/Models/Hooks/useGuid.ts","../../src/Models/Hooks/useRuntimeSceneData.ts"],"sourcesContent":["import { useState } from 'react';\nimport { createGUID, createSeededGUID } from '../Services/Utils';\nimport { useStableGuidRng } from '../Context/StableGuidRngProvider';\n\nconst useGuid = () => {\n    const stableGuidRng = useStableGuidRng();\n    const [guid] = useState(\n        stableGuidRng ? createSeededGUID(stableGuidRng) : createGUID()\n    );\n    return guid;\n};\n\nexport default useGuid;\n","import { useEffect, useState } from 'react';\nimport {\n    CustomMeshItem,\n    RuntimeBadge,\n    SceneViewBadge,\n    SceneViewBadgeGroup,\n    SceneVisual\n} from '../Classes/SceneView.types';\nimport ViewerConfigUtility from '../Classes/ViewerConfigUtility';\nimport { DEFAULT_REFRESH_RATE_IN_MILLISECONDS } from '../Constants';\nimport { IADT3DViewerAdapter } from '../Constants/Interfaces';\nimport { deepCopy, getDebugLogger } from '../Services/Utils';\nimport { hasBadge, shouldShowVisual } from '../SharedUtils/VisualRuleUtils';\nimport {\n    I3DScenesConfig,\n    IBehavior,\n    IPollingConfiguration\n} from '../Types/Generated/3DScenesConfiguration-v1.0.0';\nimport useAdapter from './useAdapter';\n\nconst debugLogging = false;\nconst logDebugConsole = getDebugLogger('useRuntimeSceneData', debugLogging);\n\nexport const useRuntimeSceneData = (\n    adapter: IADT3DViewerAdapter,\n    sceneId: string,\n    scenesConfig: I3DScenesConfig,\n    /** Optional array of layer Ids to apply SceneVisual behavior filtering */\n    selectedLayerIds: string[] = null\n) => {\n    const [modelUrl, setModelUrl] = useState('');\n    const [pollingInterval, setPollingInterval] = useState(\n        DEFAULT_REFRESH_RATE_IN_MILLISECONDS\n    );\n    const [lastRefreshTime, setLastRefreshTime] = useState<number>(null);\n    const [sceneVisuals, setSceneVisuals] = useState<Array<SceneVisual>>([]);\n    const [sceneBadges, setSceneBadges] = useState<Array<SceneViewBadgeGroup>>(\n        []\n    );\n\n    const sceneData = useAdapter({\n        adapterMethod: (args?: { isManualRefresh: boolean }) => {\n            setLastRefreshTime(Date.now());\n            return adapter.getSceneData(\n                sceneId,\n                scenesConfig,\n                selectedLayerIds,\n                args?.isManualRefresh ?? false\n            );\n        },\n        refetchDependencies: [sceneId, scenesConfig, selectedLayerIds],\n        isLongPolling: true,\n        pollingIntervalMillis: pollingInterval\n    });\n\n    /**\n     * After getting ADT3DViewerData (including scene visuals along with 3d model URL) from adapter, parse it to\n     * update the colored meshes ids based on run expressions in behaviors against the returned ADT twin property data\n     *  */\n    useEffect(() => {\n        if (sceneData?.adapterResult?.result?.data) {\n            const sceneVisuals = deepCopy(\n                sceneData.adapterResult.result.data.sceneVisuals\n            );\n\n            if (selectedLayerIds) {\n                const behaviorIdsInSelectedLayers = ViewerConfigUtility.getBehaviorIdsInSelectedLayers(\n                    scenesConfig,\n                    [...selectedLayerIds],\n                    sceneId\n                );\n\n                // Apply layer filtering to behaviors - splice out behaviors not in selected layers\n                sceneVisuals.forEach((sv) => {\n                    const filteredBehaviors = sv.behaviors.filter((b) =>\n                        behaviorIdsInSelectedLayers.includes(b.id)\n                    );\n                    sv.behaviors = filteredBehaviors;\n                });\n            }\n\n            const twinIds = new Set<string>();\n            const badgeVisuals: Array<{\n                sceneVisual: SceneVisual;\n                sceneViewBadge: SceneViewBadge;\n            }> = [];\n            // for each scene visual retrieve the colored mesh ids and update it in the scene visual\n            // if they are triggered by the element's behaviors and currently active\n            sceneVisuals.forEach((sceneVisual) => {\n                sceneVisual.coloredMeshItems = [];\n\n                for (const twinId in sceneVisual.twins) {\n                    twinIds.add(sceneVisual.twins[twinId].$dtId);\n                }\n\n                sceneVisual.behaviors?.forEach((behavior) => {\n                    behavior.visuals?.forEach((visual) => {\n                        if (!ViewerConfigUtility.isVisualRule(visual)) {\n                            return;\n                        }\n\n                        visual.valueRanges.forEach((condition) => {\n                            // Check if visual will be shown, then determine if it is a badge or coloring\n                            if (\n                                shouldShowVisual(\n                                    visual.valueRangeType,\n                                    sceneVisual.twins,\n                                    visual.valueExpression,\n                                    condition.values\n                                )\n                            ) {\n                                if (hasBadge(condition)) {\n                                    const badge = buildBadgeVisual(\n                                        sceneVisual,\n                                        behavior,\n                                        condition.visual.iconName,\n                                        condition.visual.color\n                                    );\n                                    badgeVisuals.push(badge);\n                                } else {\n                                    sceneVisual.element.objectIDs?.forEach(\n                                        (meshId) => {\n                                            const coloredMesh: CustomMeshItem = {\n                                                meshId: meshId,\n                                                color: condition.visual.color\n                                            };\n                                            sceneVisual.coloredMeshItems.push(\n                                                coloredMesh\n                                            );\n                                        }\n                                    );\n                                }\n                            }\n                        });\n                    });\n                });\n            });\n\n            const groupedBadges: SceneViewBadgeGroup[] = [];\n\n            badgeVisuals.forEach((badge) => {\n                // create first group\n                if (groupedBadges.length === 0) {\n                    groupedBadges.push({\n                        id:\n                            badge.sceneViewBadge.meshId +\n                            badge.sceneViewBadge.id,\n                        element: badge.sceneVisual.element,\n                        behaviors: badge.sceneVisual.behaviors,\n                        twins: badge.sceneVisual.twins,\n                        meshId: badge.sceneViewBadge.meshId,\n                        badges: [badge.sceneViewBadge]\n                    });\n                } else {\n                    const group = groupedBadges.find(\n                        (ga) => ga.meshId === badge.sceneViewBadge.meshId\n                    );\n\n                    // add to existing group\n                    if (group) {\n                        group.id += badge.sceneViewBadge.id;\n                        group.badges.push(badge.sceneViewBadge);\n                    } else {\n                        // create new group\n                        groupedBadges.push({\n                            id:\n                                badge.sceneViewBadge.meshId +\n                                badge.sceneViewBadge.id,\n                            element: badge.sceneVisual.element,\n                            behaviors: badge.sceneVisual.behaviors,\n                            twins: badge.sceneVisual.twins,\n                            meshId: badge.sceneViewBadge.meshId,\n                            badges: [badge.sceneViewBadge]\n                        });\n                    }\n                }\n            });\n\n            // fetch the config\n            const pollingConfig = ViewerConfigUtility.getPollingConfig(\n                scenesConfig,\n                sceneId\n            );\n\n            const computeInterval = (\n                twinCount: number,\n                pollingConfig: IPollingConfiguration\n            ) => {\n                const fastestPossibleRefreshRateSeconds = twinCount * 500; // 2 twin/second\n                const actualRefreshRateSeconds = pollingConfig.minimumPollingFrequency\n                    ? Math.max(\n                          fastestPossibleRefreshRateSeconds,\n                          pollingConfig.minimumPollingFrequency\n                      )\n                    : fastestPossibleRefreshRateSeconds;\n                logDebugConsole(\n                    'debug',\n                    `Computing refresh rate. FastestPossible: ${fastestPossibleRefreshRateSeconds}. (Twins: ${twinCount}) Actual: ${actualRefreshRateSeconds}. Config: `,\n                    pollingConfig\n                );\n                return actualRefreshRateSeconds;\n            };\n\n            setPollingInterval(computeInterval(twinIds.size, pollingConfig));\n            setModelUrl(sceneData.adapterResult.result.data.modelUrl);\n            setSceneVisuals(sceneVisuals);\n            setSceneBadges(groupedBadges);\n        }\n    }, [\n        pollingInterval,\n        sceneData.adapterResult.result,\n        sceneId,\n        scenesConfig,\n        selectedLayerIds\n    ]);\n\n    return {\n        modelUrl,\n        sceneVisuals,\n        sceneBadges,\n        isLoading: sceneData.isLoading,\n        triggerRuntimeRefetch: () =>\n            sceneData.callAdapter({ isManualRefresh: true }),\n        lastRefreshTime: lastRefreshTime,\n        nextRefreshTime: lastRefreshTime + pollingInterval\n    };\n};\n\nfunction buildBadgeVisual(\n    sceneVisual: SceneVisual,\n    behavior: IBehavior,\n    iconName: string,\n    color: string\n): { sceneVisual: SceneVisual; sceneViewBadge: RuntimeBadge } {\n    const meshId = sceneVisual.element.objectIDs?.[0];\n\n    const sceneViewBadge: RuntimeBadge = {\n        id: behavior.id,\n        meshId: meshId,\n        color: color,\n        icon: iconName\n    };\n\n    return {\n        sceneVisual: sceneVisual,\n        sceneViewBadge: sceneViewBadge\n    };\n}\n\nexport default useRuntimeSceneData;\n"],"names":[],"mappings":"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"}